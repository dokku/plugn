// Code generated by go-bindata.
// sources:
// bashenv/bash.bash
// bashenv/cmd.bash
// bashenv/fn.bash
// bashenv/plugn.bash
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bashenvBashBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x51\x8b\x13\x31\x14\x85\x9f\x3b\xbf\xe2\x6c\x58\x18\x05\x77\x07\x64\x9f\x2a\x2d\xb4\xa8\xd4\x97\x8e\x58\x11\xa5\x14\xb9\xcd\xdc\x69\x82\x99\x44\x72\x13\x6a\xff\xbd\x64\xb4\x32\x56\x9f\x02\xc9\x3d\xdf\x39\x39\xb7\xb2\x3d\xf6\x7b\xa8\xfb\xf5\x6a\xb7\xf9\xfa\xe9\xcd\x87\xdd\xbb\xed\xdb\x56\xe1\xc1\x25\xa8\x27\x85\xc3\xe1\x15\x92\x61\x5f\xcd\x58\x9b\x00\x75\x77\x87\x2f\x21\x47\xc8\x45\x12\x0f\x58\x93\x18\x58\x41\xc8\x09\xa1\x47\x47\x89\xe7\x98\xb0\xda\xad\x9a\x28\xdf\x3b\x26\x61\xe4\xef\xa7\x48\x1d\x23\x85\x5f\xfa\x27\x84\x88\x53\x64\x4a\x1c\x1f\x55\x35\xbb\x46\x7a\x96\x3d\x0d\xfc\x5c\x61\xb1\x80\x7a\x4d\xf1\x6c\xfd\x34\xd0\xc8\xfd\x7d\x40\xb5\x1e\xed\x0e\x9f\x5f\x20\x0b\x63\x13\x06\x3e\x46\x3e\x17\x0b\xeb\x25\x91\x73\x70\x94\x58\xd2\xe8\x38\x57\x57\x59\x0d\xe0\x1e\xe3\xe8\x75\xee\x48\x62\xea\x5b\xfa\x47\xc3\x1e\xd4\x75\xb0\xa9\x30\x1b\x4e\xba\x11\xc3\xce\x09\xc8\x77\xd0\x86\xfc\x89\x71\x29\xcd\x64\xe1\x58\x0b\xc6\xd7\x5b\x23\xc9\x5d\x80\x18\x3c\x68\xa8\xf1\xba\xc9\x12\x1b\x17\x34\xb9\xe6\x68\x7d\x53\xbc\xb1\x5c\x4e\xf9\xaa\xfe\x1b\xa1\x4d\xd1\xcb\xff\x94\xff\xa4\x5e\xc1\x97\x0e\x38\x0e\xd6\x93\x83\xb0\x88\x0d\xbe\xec\xab\x34\x08\xcf\x9a\x45\x28\x5e\xca\x97\x12\x7d\x63\x70\xdf\xb3\x4e\x8f\xea\x0f\xa8\xb7\xd5\x8c\x7f\xd8\x84\x97\x55\x6f\xab\x9f\x01\x00\x00\xff\xff\xbe\x15\xe5\x0d\x2d\x02\x00\x00")

func bashenvBashBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvBashBash,
		"bashenv/bash.bash",
	)
}

func bashenvBashBash() (*asset, error) {
	bytes, err := bashenvBashBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/bash.bash", size: 557, mode: os.FileMode(420), modTime: time.Unix(1546126926, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvCmdBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x6e\xdb\x3a\x10\x3c\x93\x5f\x31\x6f\x43\x07\xc9\x41\xd0\x93\x4f\x85\x0d\x17\x09\xda\xde\xda\x5e\x72\x8c\x1d\x80\x95\xa8\x58\x88\x4c\x19\xa2\xec\xa6\xb0\xf5\xef\xc5\x52\x94\x22\x25\x3e\xf5\x94\x88\x5c\xce\xce\xcc\xce\x5a\x66\x26\x2d\x75\x6d\x10\xdd\xe3\xcb\x8f\xaf\x0f\x52\xa6\xbb\x2c\x2a\x0b\xd7\xdc\xdc\xe2\x24\x45\x7f\x9d\x19\x97\xae\xe8\x7b\xe1\x1a\x07\x7d\xd4\x45\xa9\x7f\x95\x06\x69\xb5\xdb\x69\x9b\x39\x7a\x2b\xb4\x6e\x45\x2a\x21\x29\x7a\x9c\xe8\xc5\xfc\x71\x20\x65\x1d\xe1\x0c\x67\x32\x90\x8b\x95\x75\x8b\x38\x26\xd9\xbe\xf5\xf3\x75\xd3\xa6\x03\x56\x5e\xd5\x78\x41\x61\x41\xea\xf4\x1f\xd3\x7c\xbc\xdb\xb4\xb4\x44\x56\x49\x21\x4c\xba\xad\x40\xea\x85\x49\x54\xd6\xe0\x8c\xe7\xda\xec\x41\x4f\xdc\xc4\xf7\xac\xea\x66\xd2\xc9\x86\x3e\xff\x02\x1b\x1d\xb1\x78\x87\x69\x5e\xf7\x55\x7d\xd1\xaf\x6f\xfe\xc6\x41\x23\x3f\xd8\xb4\x29\x2a\x0b\xcd\x5f\xc1\xb7\x91\x6d\xb9\xf5\x52\xa1\x59\xf2\x69\xbe\x88\x54\xd2\x92\x14\x65\x95\xea\xd2\xfb\x10\x5c\xb0\x4c\x57\xdd\x8c\xa4\xdc\x4e\xf9\xe6\x96\xc6\x0e\x44\x84\xeb\xcf\x88\x33\x73\x8c\xed\xa1\x2c\x71\x7d\xdd\xb9\x6a\x83\x2c\x29\xbc\x6e\x1e\xcf\x42\x9d\xb4\x8b\xaf\x94\x75\x51\xdc\xd2\x66\xe5\xb1\xa6\x1a\x07\xe7\xde\x4d\x28\xc8\x55\x73\x92\xc2\x1c\x75\x09\x52\x09\x17\x42\x8a\xa9\x23\x6b\x52\xfc\x77\x4d\x52\xf8\x80\x58\x07\x95\x60\x4d\x6b\x75\xb7\xa6\x25\xa4\x68\x43\x72\xba\x7e\xe8\xc6\x1f\x28\x26\x9e\x54\x32\x70\xea\xc9\xbc\x99\xa4\x12\x5a\xc2\x6d\x8b\xbc\x41\x7f\x9c\xee\xb2\xc9\xf9\xf9\x8c\xa6\x3e\x98\xfe\xda\x35\xba\x39\xb8\xd5\xff\x52\x14\x39\x7a\x57\x87\xb4\x7a\x1b\x9f\x54\xba\xcb\xd6\x6a\xe2\xe3\x12\xcd\xd6\x58\x29\x84\x3a\x8d\xfc\x4b\x77\x19\x6d\x5a\x90\xba\x63\x1f\x4a\x67\xa4\x60\xd8\xc7\x47\x90\xbf\xc3\x66\x33\x3c\x0c\xf3\xfa\x59\xc1\x1d\xd2\x6d\x9f\x88\x05\x7c\x21\xdf\x07\x66\x73\x1e\x6d\xd9\xa3\x30\xad\x8f\x20\xea\x26\xb7\x11\xfb\xda\x55\xdc\xf2\xfb\xbc\x08\x99\x18\xa2\x71\xff\x61\x6d\x17\xbe\xb0\xaa\x59\xf8\x34\x57\x01\x28\x44\x4b\xec\xeb\xc2\x36\x39\x08\x98\x45\xf3\x4f\x0e\x33\xb7\xb6\xd4\x8b\x9a\xb4\xff\x68\x47\x47\xa7\xcb\xda\x40\xe8\xb5\x68\xa0\x3a\x85\x92\xa9\x86\x89\x6e\x4d\xb9\xbf\xb4\x47\x0f\xdb\xea\xb7\x03\xdf\xa2\xb0\x79\x55\xef\xb4\xdf\x25\xa6\x7e\x69\x99\x74\xfd\xcc\x61\xe0\x29\xf4\xc6\xf1\xd1\xc8\x3a\x00\xe8\x95\xb3\x48\x9f\x09\xfe\xc7\x1a\x5c\xa1\xd4\xae\x61\x90\xae\x6c\x14\xaf\x13\xc3\xc4\x33\x56\x16\xf3\x0f\x45\x77\x68\x5d\x3c\xc3\xf4\x1b\x71\xd4\xd2\xf8\xb9\xdf\xef\x0b\xe6\x04\x26\x36\x62\x5d\x61\x7d\x93\x21\x3c\x61\x45\xfc\xf2\xb3\x49\xa3\xcd\xe8\xed\xf2\xae\xc8\xbf\x01\x00\x00\xff\xff\x4c\x2e\xf9\x29\xc7\x05\x00\x00")

func bashenvCmdBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvCmdBash,
		"bashenv/cmd.bash",
	)
}

func bashenvCmdBash() (*asset, error) {
	bytes, err := bashenvCmdBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/cmd.bash", size: 1479, mode: os.FileMode(420), modTime: time.Unix(1546126926, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvFnBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x4d\x6f\xe2\x30\x10\x3d\xdb\xbf\xe2\x69\x64\x09\xd0\x2a\x8a\xe0\xca\x66\x8f\x2b\xed\x6f\x60\x39\x58\x66\x4c\xac\xa6\x93\xc8\x36\xa0\x0a\xf2\xdf\x2b\x43\x5a\x72\xa8\xaa\x1e\x3d\xef\xcd\xfb\x18\x6b\x2f\x95\x8d\xc7\xb4\x5c\xe1\xaa\xd5\x81\x5d\x67\x23\xe3\xc0\xc9\x35\xf4\x4f\xd2\xc0\x2e\xc3\xc2\x9f\xc4\xe5\xd0\xcb\x22\xc1\xc6\xe3\xe9\x95\x25\x27\xd2\xaa\xeb\x9d\xed\xca\xa4\x0b\xc2\x8d\x59\xe6\xb7\x81\x61\xd6\xb8\xe1\x18\x79\xc0\x87\xda\xf4\xac\xce\xa0\xb9\x01\xe1\x86\x96\xed\x01\xd5\x7a\xa5\x15\xbb\xb6\x47\xc5\x20\x73\x9d\x04\xeb\x1a\x35\xfd\x17\x1a\x0b\xd1\x5e\x5e\x50\xfd\x6d\xb0\xa8\x9b\xfa\x3a\xc4\x20\x19\xf4\x9b\xcc\x9a\xfe\xd0\xb8\xc0\x0d\x39\xa2\x70\x41\x20\x3d\xea\xd2\xaa\x58\xfc\xb8\x55\x81\x62\x18\xca\x8b\xca\x42\x21\x92\x56\x7c\xb6\x1d\xe8\x8b\x62\xc9\xcd\xc2\xd3\x16\xf7\xf4\xa6\xcc\x27\xf7\x20\xbe\xff\xc6\x3d\xcd\xec\xe9\xc9\xf1\xd2\x94\x4e\x48\x6d\x7f\x49\xfd\x29\x3a\x6e\xc8\x6c\x68\xba\x0e\x19\x2f\x30\xcb\xe9\xc7\x60\xbc\xac\x3e\x21\x3c\x80\x7b\xb2\x19\xa0\x55\xf0\xd8\xed\x40\xe6\x29\x49\xd8\xef\xb7\xc8\x2d\x8b\x56\xea\xd1\xcc\x4b\x39\xa1\x0d\x1d\x2a\xc1\xaf\x8d\x56\xd3\xb2\x0f\x7a\xd4\xef\x01\x00\x00\xff\xff\x5c\xaf\x12\xe0\x23\x02\x00\x00")

func bashenvFnBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvFnBash,
		"bashenv/fn.bash",
	)
}

func bashenvFnBash() (*asset, error) {
	bytes, err := bashenvFnBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/fn.bash", size: 547, mode: os.FileMode(420), modTime: time.Unix(1546126926, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvPlugnBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5b\x6f\xdb\x38\x16\x7e\x16\x7f\xc5\x19\x8e\x26\x13\x17\x90\x5d\x67\xb1\x2f\xcd\x3a\x68\xd1\x06\x6d\x80\xa2\x0d\x92\x76\xf7\x21\x2d\x02\x46\xa2\x2c\x22\x14\xa9\x92\x94\x9d\x4b\xf3\xdf\x17\xbc\xe8\xe6\xc8\x4e\xa6\x7d\x29\xe2\xc3\x73\x3e\x7e\x3c\x97\x8f\x54\xd1\x8a\x2a\xcd\xa4\xd8\x9f\xc0\x3d\x8a\x32\x9a\x72\xa2\x28\x64\x54\xa7\x0b\x7c\x5e\xc8\x35\x84\x75\x8c\x22\x9a\x16\x12\x70\xc5\xeb\xa5\x78\x05\xf1\xfd\xe9\xc7\xaf\xef\x3f\x5d\xfe\xf7\xf8\xec\xfc\xe4\xf3\xa7\x57\x49\x46\x57\x0f\x18\x3d\x20\xc4\x84\x36\x84\xf3\x31\xc0\x13\xbf\x04\x04\x04\x5d\x83\x45\x62\x02\x72\x25\x4b\x20\xf0\x9e\x19\xf8\x7a\xf6\x11\x77\x31\xb5\xe2\x0b\x1c\xcf\x31\x08\x52\xd2\x05\x8e\x0f\x30\x8a\xb8\x4c\x09\x87\x2b\xa2\x69\xce\x38\xb5\x0b\x90\xc9\xb5\xe0\x92\x64\x54\x01\x51\x4b\x0d\xa9\x14\x86\x0a\xa3\x21\x5d\x67\x28\xea\xbb\x2e\x70\xbc\x6f\x7f\xbb\x30\x1c\xd7\x8a\xe3\x09\x46\x51\x55\xeb\x22\x03\x1c\xdb\x03\x9d\x7c\xba\x3c\x7d\xf3\xe5\xc3\x8c\xac\x08\xe3\xe4\x8a\x53\x0c\x7b\x47\xb3\x8c\xae\x66\xa2\xe6\x1c\x45\x2c\x87\x8b\x0b\xc0\x71\x1f\x16\xc3\x62\x01\x2f\xa6\x86\xa8\xe9\xf2\x0e\xbe\x7f\x87\x9f\x3f\xb7\x3b\x39\x8f\x43\x30\x05\x15\x28\x8a\xd6\x05\x4b\x0b\x48\x6b\xc5\xe1\x08\xda\x6d\xe0\xe0\x68\x6f\x0e\x7b\x7b\xbd\xa3\x2d\xb0\x75\xc2\xd6\x68\x0f\xb9\xc0\x89\xb6\xa9\x0a\x00\xeb\x25\x35\x4f\x02\x58\xa7\x3e\xc0\x0f\x48\x92\x92\xdc\x24\x8a\x66\x4c\xd1\xd4\x2c\xe6\x90\x7c\x4e\x30\x42\x51\x38\x65\x72\x07\x38\xee\x10\x70\x9f\x78\x68\x86\x53\x4e\x89\xa6\x10\x4a\x0e\x94\x99\x82\x2a\x7f\x1e\xa9\x3c\x2d\x23\xdb\xe5\x15\x23\xe0\xb3\x84\x61\x7e\xb4\x77\xe0\x70\x6e\x98\x81\x39\x8a\xa2\x9c\xa1\x28\x2a\xaf\x33\xa6\x20\xa9\xc0\x56\xdb\x72\xfd\x66\x7d\x86\x2c\x62\x57\x65\x5f\x3e\xf8\x69\x01\xe1\xe6\x0e\x92\xb7\xc3\x98\xa6\xa8\x07\x1b\x05\x8c\xfe\x84\x92\x5c\x53\xd0\xb5\xa2\xb0\xa6\x50\x0b\x43\x94\xa2\x19\x10\xd0\x4c\x2c\x39\x05\xcb\x80\x09\x23\x41\xd6\xca\xa2\x2f\xa9\x41\x51\xd4\x74\xd5\x65\xc6\x94\x5e\xec\xc7\xfb\x39\x13\x19\x4c\xc1\xa6\x30\xa3\x95\x29\x60\x0e\x89\x90\x06\x92\x8a\x98\x02\xfe\x9e\xfe\x0d\x89\xb9\xad\x28\x64\x93\x49\x3f\xdc\xf6\xc3\xd6\x78\x17\x90\xbb\x80\xa6\xd1\xee\xff\x1c\xec\x7c\xf1\xfa\xfb\x03\x86\x84\xfe\x80\xb9\xed\xb4\xbd\xbd\x0d\x2f\x8f\xdf\x79\xbd\x1c\x14\xcd\x27\x65\x3a\x7b\xd1\xcf\x49\x9b\xb2\xe8\x19\x47\xa2\x37\x34\x85\x72\x05\x49\x0e\xf7\x0f\x30\x9d\xce\xe0\xdb\xa1\x8d\x4d\xd7\xd9\x02\xc7\xa7\xff\x7b\x87\xdd\x3e\xb2\xca\x36\xd2\x1e\xa9\xd2\x26\x16\xc7\xe9\x3a\xc3\xa1\xdc\x94\x6b\x8a\xa2\x68\xc9\x0c\xa4\x5c\x8a\x66\x26\x21\x3e\x40\x6e\x3d\xc0\x74\x7d\x6d\xe5\xa5\x16\x3b\x04\xe6\x8c\x96\x72\x45\x87\xca\xd2\x4c\x72\xb0\xea\x9e\xc2\x78\x8b\x13\x19\x14\xa9\x12\x12\x95\x6f\xe8\x00\x15\x36\x34\x9b\xc5\xde\x75\x9b\x5b\xbb\x49\xe7\x68\xa9\x56\x19\x31\x74\x8c\xe7\x57\xb7\xd2\xf0\x24\x22\x03\x59\x19\x26\x05\xe1\xfc\x16\x2a\x26\xec\xd4\xa4\xb2\x2c\x99\x99\x19\xb2\x9c\x5d\x29\x22\xd2\x62\x9c\x78\xf0\x33\x4c\x17\x41\x23\x2f\x2e\xe0\x0f\x48\xb6\x2a\x5a\x4b\x31\x34\x50\x33\xc9\x8e\xca\x7e\x58\x9c\x80\x2d\x7c\xc8\x34\xcd\xdc\x5c\x35\xa3\xba\x53\x2f\x3b\xf4\x41\xfd\x1b\x39\xe9\xc8\xe2\xae\x7f\xff\x80\x78\xdf\x36\x81\xbe\x2d\xaf\x24\x67\x69\xa2\x68\x0e\x1f\x8e\xdf\xbc\x9b\x8c\x51\xac\x98\x10\x34\xb3\x19\x8a\xf7\xff\x03\xd3\xd9\xd4\x6f\x78\xd9\x41\x4f\x3a\xba\x2f\x91\x6f\xaf\x82\xa6\xd7\xb2\x36\x50\x12\x6d\xa8\x1a\x36\x95\xf3\xa8\xdc\x24\x3c\x32\xb7\x81\xc9\xc6\x62\x90\x48\xf1\xe8\x4c\xed\xb4\xd9\xf0\x9c\x9a\xb4\x80\x24\x31\x64\xa9\x37\x00\x86\xf0\x3d\x90\x4d\x3f\x7f\xf8\xc1\x2e\x47\xa3\xc7\x46\x9d\x2a\x6f\xd4\xd2\x37\x62\xe6\x1a\xad\x97\xbe\x1e\x64\x3b\x8c\xbb\x11\xf0\x8e\xc1\xe4\x4c\x9b\xb1\x5e\xff\xc8\xb4\x01\x2b\xff\xfe\xee\xee\xa6\x50\x17\xb2\x32\x90\x68\xb0\x08\x4b\x2e\xaf\x50\x94\x4b\x05\x4e\x6c\x98\x80\x2d\xfd\xf5\xe2\x10\x32\x89\xa2\xa8\x8f\x36\xb8\xd8\x63\x0b\x60\xef\xf5\xe0\xa2\x0d\x31\xb5\xb6\x2e\xb6\x60\x14\x76\xcd\x77\xbf\xdf\xc2\x92\xbd\xcd\xdd\xef\x8c\x69\x67\xe8\x41\x87\xb7\x91\xc5\x4e\x89\xf1\x3b\xcf\x3c\xd2\xd4\xc8\x92\xdb\xeb\x49\x96\x3c\xb1\xf7\x20\x6e\xe6\x02\x37\x2f\xaa\x1e\x90\xcf\xd4\x3f\x42\xb1\x21\x8a\x39\xd5\xf0\x48\x95\x62\xc2\xe4\x80\x01\xfe\x4a\x0e\x5e\x6a\xf8\x2b\xf9\xb7\xfd\x67\x6e\xff\xd4\xdf\x6c\x48\x3b\x9a\x38\x6e\x38\x00\x8e\x7d\x7e\xec\x5f\x16\xd2\x8a\x8c\x14\xb4\xad\x4e\xdd\x55\xe7\x01\x21\xa3\xd8\x72\x49\xd5\x58\x99\xbf\xf8\x25\x0d\x85\x94\xd7\xb6\x7e\x4d\xfe\x1e\xcb\xae\xf5\x70\xda\x75\x08\xba\x60\xb9\xd9\xde\x0a\xbe\x28\x9b\xcd\xd0\x14\xad\x69\x05\xba\x22\x1c\x6c\xf6\xa4\xc8\xd9\x32\xa1\x37\x95\x54\x06\x06\x2d\xe1\xdb\x78\x82\x11\x40\xe4\xc4\xe8\xa6\x4d\xc7\x2c\xb6\x7c\x1a\x39\x1a\x18\x01\xc7\xaf\x77\x24\x24\x0a\xe9\x48\x96\xc4\xd0\x35\xb9\x85\x5e\xd0\x03\x42\x9e\xe6\x58\xae\x8e\xdd\x0a\x10\x68\x6f\x95\xd1\x1b\xa9\xf7\x1a\x1a\x39\xbe\x7d\x0d\x0b\x48\x72\xfd\xb4\x14\x3f\x79\xa7\x51\xfb\xb8\x6a\x8e\x61\xb9\x87\x66\x1f\x23\xff\xce\x2f\xfd\x3e\x7b\x55\xfe\x02\xb1\x50\xe3\x25\x1d\xd5\x9a\xf7\xd4\x34\x4d\xe3\x1d\x6b\x45\x8c\xff\x7a\x19\xbb\x3a\x7b\x1f\x16\x76\xf2\x86\x6c\x3c\x80\x9b\x40\x3c\x18\xc1\x5e\x5a\xdd\xcb\xbe\x47\xcb\xb7\xde\x68\xc9\x7d\x53\x3e\x9f\xdc\x73\x29\x85\x6e\xc7\xfd\x87\x47\x60\xa3\xc7\x93\x74\xfe\x8b\x49\x82\x15\xe1\xb5\xfd\xf3\x5f\xcd\xc7\xa0\xbb\xfe\x9c\xb5\xa5\xa3\xe9\x4e\xd2\xa3\xc9\x63\x82\x8d\x12\x3d\x11\xcc\x30\xc2\xd9\x1d\x05\x22\x80\x96\x95\xb9\x6d\x88\x5b\x8d\xdc\xda\x63\x18\x45\x46\xd6\x69\xb1\x83\xc8\x33\xda\x73\x8b\x43\xf7\x65\xd8\x7c\x11\x77\x34\xb3\x40\xd2\x5e\x9f\xa2\x4f\x75\x53\xc2\xdc\xb1\x2f\xb5\xac\x55\x3a\x3a\x63\xe7\x6e\xc5\x3d\xed\x88\xc8\x34\x58\x31\x74\xde\x1b\x0f\xd9\xdf\xd1\xcd\x46\x09\xf3\x9e\x12\x3e\x96\xcc\x69\xf7\x52\xf3\xa7\xf5\xa4\xe1\x89\x90\x9d\xb7\x48\x49\x58\xf8\xff\x06\xdb\x2d\x09\x95\x50\xb1\x8a\xe6\x84\xf1\x43\xff\x39\xf3\xe5\xec\xcd\xdb\xe3\x66\x5b\xe7\x73\x83\x50\x94\x96\x59\xd3\xed\xe1\xfa\x1a\xd8\xc2\x63\x75\x60\x6b\x3f\x16\x86\x56\xf7\x98\x19\x98\xec\xe3\x65\x60\x08\xd2\x3e\xb0\xf9\xfc\x0d\x4c\x41\x27\x07\xb6\x50\xd7\x26\x55\xb8\xbf\x98\x08\x1d\x86\xae\x7d\x64\x6d\xce\x60\x0f\xa9\x13\xbb\x31\xb3\xff\x35\xb6\xa2\x37\x02\xec\x80\x85\x04\x0a\x0d\x18\x37\x57\xd4\xff\x03\x00\x00\xff\xff\xda\xbc\x90\x39\xfd\x11\x00\x00")

func bashenvPlugnBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvPlugnBash,
		"bashenv/plugn.bash",
	)
}

func bashenvPlugnBash() (*asset, error) {
	bytes, err := bashenvPlugnBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/plugn.bash", size: 4605, mode: os.FileMode(420), modTime: time.Unix(1546126926, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bashenv/bash.bash": bashenvBashBash,
	"bashenv/cmd.bash": bashenvCmdBash,
	"bashenv/fn.bash": bashenvFnBash,
	"bashenv/plugn.bash": bashenvPlugnBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bashenv": &bintree{nil, map[string]*bintree{
		"bash.bash": &bintree{bashenvBashBash, map[string]*bintree{}},
		"cmd.bash": &bintree{bashenvCmdBash, map[string]*bintree{}},
		"fn.bash": &bintree{bashenvFnBash, map[string]*bintree{}},
		"plugn.bash": &bintree{bashenvPlugnBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

