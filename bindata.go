// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// bashenv/bash.bash
// bashenv/cmd.bash
// bashenv/fn.bash
// bashenv/plugn.bash
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bashenvBashBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x51\x8b\x13\x31\x14\x85\x9f\x3b\xbf\xe2\x6c\x58\x18\x05\x77\x07\x64\x9f\x2a\x2d\xb4\xa8\xd4\x97\x8e\x58\x11\xa5\x14\xb9\xcd\xdc\x69\x82\x99\x44\x72\x13\x6a\xff\xbd\x64\xb4\x32\x56\x9f\x02\xc9\x3d\xdf\x39\x39\xb7\xb2\x3d\xf6\x7b\xa8\xfb\xf5\x6a\xb7\xf9\xfa\xe9\xcd\x87\xdd\xbb\xed\xdb\x56\xe1\xc1\x25\xa8\x27\x85\xc3\xe1\x15\x92\x61\x5f\xcd\x58\x9b\x00\x75\x77\x87\x2f\x21\x47\xc8\x45\x12\x0f\x58\x93\x18\x58\x41\xc8\x09\xa1\x47\x47\x89\xe7\x98\xb0\xda\xad\x9a\x28\xdf\x3b\x26\x61\xe4\xef\xa7\x48\x1d\x23\x85\x5f\xfa\x27\x84\x88\x53\x64\x4a\x1c\x1f\x55\x35\xbb\x46\x7a\x96\x3d\x0d\xfc\x5c\x61\xb1\x80\x7a\x4d\xf1\x6c\xfd\x34\xd0\xc8\xfd\x7d\x40\xb5\x1e\xed\x0e\x9f\x5f\x20\x0b\x63\x13\x06\x3e\x46\x3e\x17\x0b\xeb\x25\x91\x73\x70\x94\x58\xd2\xe8\x38\x57\x57\x59\x0d\xe0\x1e\xe3\xe8\x75\xee\x48\x62\xea\x5b\xfa\x47\xc3\x1e\xd4\x75\xb0\xa9\x30\x1b\x4e\xba\x11\xc3\xce\x09\xc8\x77\xd0\x86\xfc\x89\x71\x29\xcd\x64\xe1\x58\x0b\xc6\xd7\x5b\x23\xc9\x5d\x80\x18\x3c\x68\xa8\xf1\xba\xc9\x12\x1b\x17\x34\xb9\xe6\x68\x7d\x53\xbc\xb1\x5c\x4e\xf9\xaa\xfe\x1b\xa1\x4d\xd1\xcb\xff\x94\xff\xa4\x5e\xc1\x97\x0e\x38\x0e\xd6\x93\x83\xb0\x88\x0d\xbe\xec\xab\x34\x08\xcf\x9a\x45\x28\x5e\xca\x97\x12\x7d\x63\x70\xdf\xb3\x4e\x8f\xea\x0f\xa8\xb7\xd5\x8c\x7f\xd8\x84\x97\x55\x6f\xab\x9f\x01\x00\x00\xff\xff\xbe\x15\xe5\x0d\x2d\x02\x00\x00")

func bashenvBashBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvBashBash,
		"bashenv/bash.bash",
	)
}

func bashenvBashBash() (*asset, error) {
	bytes, err := bashenvBashBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/bash.bash", size: 557, mode: os.FileMode(420), modTime: time.Unix(1652436656, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvCmdBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x6e\xdb\x3a\x10\x3c\x93\x5f\x31\x6f\x43\x07\xc9\x41\xd0\x93\x4f\x85\x0d\x17\x09\xda\xde\xda\x5e\x72\x8c\x1d\x80\x95\xa8\x58\x88\x4c\x19\xa2\xec\xa6\xb0\xf5\xef\xc5\x52\x94\x22\x25\x3e\xf5\x94\x88\x5c\xce\xce\xcc\xce\x5a\x66\x26\x2d\x75\x6d\x10\xdd\xe3\xcb\x8f\xaf\x0f\x52\xa6\xbb\x2c\x2a\x0b\xd7\xdc\xdc\xe2\x24\x45\x7f\x9d\x19\x97\xae\xe8\x7b\xe1\x1a\x07\x7d\xd4\x45\xa9\x7f\x95\x06\x69\xb5\xdb\x69\x9b\x39\x7a\x2b\xb4\x6e\x45\x2a\x21\x29\x7a\x9c\xe8\xc5\xfc\x71\x20\x65\x1d\xe1\x0c\x67\x32\x90\x8b\x95\x75\x8b\x38\x26\xd9\xbe\xf5\xf3\x75\xd3\xa6\x03\x56\x5e\xd5\x78\x41\x61\x41\xea\xf4\x1f\xd3\x7c\xbc\xdb\xb4\xb4\x44\x56\x49\x21\x4c\xba\xad\x40\xea\x85\x49\x54\xd6\xe0\x8c\xe7\xda\xec\x41\x4f\xdc\xc4\xf7\xac\xea\x66\xd2\xc9\x86\x3e\xff\x02\x1b\x1d\xb1\x78\x87\x69\x5e\xf7\x55\x7d\xd1\xaf\x6f\xfe\xc6\x41\x23\x3f\xd8\xb4\x29\x2a\x0b\xcd\x5f\xc1\xb7\x91\x6d\xb9\xf5\x52\xa1\x59\xf2\x69\xbe\x88\x54\xd2\x92\x14\x65\x95\xea\xd2\xfb\x10\x5c\xb0\x4c\x57\xdd\x8c\xa4\xdc\x4e\xf9\xe6\x96\xc6\x0e\x44\x84\xeb\xcf\x88\x33\x73\x8c\xed\xa1\x2c\x71\x7d\xdd\xb9\x6a\x83\x2c\x29\xbc\x6e\x1e\xcf\x42\x9d\xb4\x8b\xaf\x94\x75\x51\xdc\xd2\x66\xe5\xb1\xa6\x1a\x07\xe7\xde\x4d\x28\xc8\x55\x73\x92\xc2\x1c\x75\x09\x52\x09\x17\x42\x8a\xa9\x23\x6b\x52\xfc\x77\x4d\x52\xf8\x80\x58\x07\x95\x60\x4d\x6b\x75\xb7\xa6\x25\xa4\x68\x43\x72\xba\x7e\xe8\xc6\x1f\x28\x26\x9e\x54\x32\x70\xea\xc9\xbc\x99\xa4\x12\x5a\xc2\x6d\x8b\xbc\x41\x7f\x9c\xee\xb2\xc9\xf9\xf9\x8c\xa6\x3e\x98\xfe\xda\x35\xba\x39\xb8\xd5\xff\x52\x14\x39\x7a\x57\x87\xb4\x7a\x1b\x9f\x54\xba\xcb\xd6\x6a\xe2\xe3\x12\xcd\xd6\x58\x29\x84\x3a\x8d\xfc\x4b\x77\x19\x6d\x5a\x90\xba\x63\x1f\x4a\x67\xa4\x60\xd8\xc7\x47\x90\xbf\xc3\x66\x33\x3c\x0c\xf3\xfa\x59\xc1\x1d\xd2\x6d\x9f\x88\x05\x7c\x21\xdf\x07\x66\x73\x1e\x6d\xd9\xa3\x30\xad\x8f\x20\xea\x26\xb7\x11\xfb\xda\x55\xdc\xf2\xfb\xbc\x08\x99\x18\xa2\x71\xff\x61\x6d\x17\xbe\xb0\xaa\x59\xf8\x34\x57\x01\x28\x44\x4b\xec\xeb\xc2\x36\x39\x08\x98\x45\xf3\x4f\x0e\x33\xb7\xb6\xd4\x8b\x9a\xb4\xff\x68\x47\x47\xa7\xcb\xda\x40\xe8\xb5\x68\xa0\x3a\x85\x92\xa9\x86\x89\x6e\x4d\xb9\xbf\xb4\x47\x0f\xdb\xea\xb7\x03\xdf\xa2\xb0\x79\x55\xef\xb4\xdf\x25\xa6\x7e\x69\x99\x74\xfd\xcc\x61\xe0\x29\xf4\xc6\xf1\xd1\xc8\x3a\x00\xe8\x95\xb3\x48\x9f\x09\xfe\xc7\x1a\x5c\xa1\xd4\xae\x61\x90\xae\x6c\x14\xaf\x13\xc3\xc4\x33\x56\x16\xf3\x0f\x45\x77\x68\x5d\x3c\xc3\xf4\x1b\x71\xd4\xd2\xf8\xb9\xdf\xef\x0b\xe6\x04\x26\x36\x62\x5d\x61\x7d\x93\x21\x3c\x61\x45\xfc\xf2\xb3\x49\xa3\xcd\xe8\xed\xf2\xae\xc8\xbf\x01\x00\x00\xff\xff\x4c\x2e\xf9\x29\xc7\x05\x00\x00")

func bashenvCmdBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvCmdBash,
		"bashenv/cmd.bash",
	)
}

func bashenvCmdBash() (*asset, error) {
	bytes, err := bashenvCmdBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/cmd.bash", size: 1479, mode: os.FileMode(420), modTime: time.Unix(1652509728, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvFnBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x4d\x6f\xe2\x30\x10\x3d\xdb\xbf\xe2\x69\x64\x09\xd0\x2a\x8a\xe0\xca\x66\x8f\x2b\xed\x6f\x60\x39\x58\x66\x4c\xac\xa6\x93\xc8\x36\xa0\x0a\xf2\xdf\x2b\x43\x5a\x72\xa8\xaa\x1e\x3d\xef\xcd\xfb\x18\x6b\x2f\x95\x8d\xc7\xb4\x5c\xe1\xaa\xd5\x81\x5d\x67\x23\xe3\xc0\xc9\x35\xf4\x4f\xd2\xc0\x2e\xc3\xc2\x9f\xc4\xe5\xd0\xcb\x22\xc1\xc6\xe3\xe9\x95\x25\x27\xd2\xaa\xeb\x9d\xed\xca\xa4\x0b\xc2\x8d\x59\xe6\xb7\x81\x61\xd6\xb8\xe1\x18\x79\xc0\x87\xda\xf4\xac\xce\xa0\xb9\x01\xe1\x86\x96\xed\x01\xd5\x7a\xa5\x15\xbb\xb6\x47\xc5\x20\x73\x9d\x04\xeb\x1a\x35\xfd\x17\x1a\x0b\xd1\x5e\x5e\x50\xfd\x6d\xb0\xa8\x9b\xfa\x3a\xc4\x20\x19\xf4\x9b\xcc\x9a\xfe\xd0\xb8\xc0\x0d\x39\xa2\x70\x41\x20\x3d\xea\xd2\xaa\x58\xfc\xb8\x55\x81\x62\x18\xca\x8b\xca\x42\x21\x92\x56\x7c\xb6\x1d\xe8\x8b\x62\xc9\xcd\xc2\xd3\x16\xf7\xf4\xa6\xcc\x27\xf7\x20\xbe\xff\xc6\x3d\xcd\xec\xe9\xc9\xf1\xd2\x94\x4e\x48\x6d\x7f\x49\xfd\x29\x3a\x6e\xc8\x6c\x68\xba\x0e\x19\x2f\x30\xcb\xe9\xc7\x60\xbc\xac\x3e\x21\x3c\x80\x7b\xb2\x19\xa0\x55\xf0\xd8\xed\x40\xe6\x29\x49\xd8\xef\xb7\xc8\x2d\x8b\x56\xea\xd1\xcc\x4b\x39\xa1\x0d\x1d\x2a\xc1\xaf\x8d\x56\xd3\xb2\x0f\x7a\xd4\xef\x01\x00\x00\xff\xff\x5c\xaf\x12\xe0\x23\x02\x00\x00")

func bashenvFnBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvFnBash,
		"bashenv/fn.bash",
	)
}

func bashenvFnBash() (*asset, error) {
	bytes, err := bashenvFnBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/fn.bash", size: 547, mode: os.FileMode(420), modTime: time.Unix(1652436511, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bashenvPlugnBash = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5b\x6f\xd4\x3e\x16\x7f\x4e\x3e\xc5\xc1\x84\xd2\x22\x65\x86\xe9\x6a\x5f\xe8\x4e\x05\x82\x0a\x2a\x21\xa8\x5a\xd8\x7d\x28\xa8\x72\x13\x67\x62\x35\xb1\x83\xed\xcc\xf4\x42\xbf\xfb\xea\xd8\xce\x6d\x9a\x99\xf6\x0f\x2f\xa8\xe3\x73\xce\xcf\x3f\x9f\x7b\x08\x97\x4c\x69\x2e\xc5\xee\x1e\xdc\x85\x41\xca\x92\x82\x2a\x06\x29\xd3\xc9\x9c\x9c\xe5\x72\x05\x5e\x4e\xc2\x80\x25\xb9\x04\x52\x15\xf5\x42\xbc\x81\xe8\xee\xe4\xf3\xf7\x8f\x5f\x2e\xfe\x7b\x74\x7a\x76\xfc\xf5\xcb\x9b\x38\x65\xcb\x7b\x12\xde\x87\x21\x17\xda\xd0\xa2\x18\x03\x3c\x76\x22\xa0\x20\xd8\x0a\x10\x89\x0b\xc8\x94\x2c\x81\xc2\x47\x6e\xe0\xfb\xe9\x67\xd2\xd9\xd4\xaa\x98\x93\x68\x46\x40\xd0\x92\xcd\x49\xb4\x4f\xc2\xa0\x90\x09\x2d\xe0\x92\x6a\x96\xf1\x82\xa1\x00\x52\xb9\x12\x85\xa4\x29\x53\x40\xd5\x42\x43\x22\x85\x61\xc2\x68\x48\x56\x69\x18\xf4\x55\xe7\x24\xda\xc5\xdf\xd6\x8c\x44\xb5\x2a\xc8\x1e\x09\x83\xaa\xd6\x79\x0a\x24\xc2\x07\x1d\x7f\xb9\x38\x79\xf7\xed\xd3\x94\x2e\x29\x2f\xe8\x65\xc1\x08\xec\x1c\x4e\x53\xb6\x9c\x8a\xba\x28\xc2\x80\x67\x70\x7e\x0e\x24\xea\xc3\x12\x98\xcf\xe1\xd5\xc4\x50\x35\x59\xdc\xc2\xcf\x9f\xf0\xfb\xf7\x66\x25\xab\x71\x00\x26\x67\x22\x0c\x82\x55\xce\x93\x1c\x92\x5a\x15\x70\x08\xed\x35\xb0\x7f\xb8\x33\x83\x9d\x9d\xde\xd3\xe6\x04\x95\x08\x1e\xe2\x23\xe7\x24\xd6\xe8\x2a\x0f\xb0\x5a\x30\xf3\x28\x00\x2a\xf5\x01\x7e\x41\x1c\x97\xf4\x3a\x56\x2c\xe5\x8a\x25\x66\x3e\x83\xf8\x6b\x4c\xc2\x30\xf0\xaf\x8c\x6f\x81\x44\x1d\x02\xe9\x13\xf7\xc9\x70\x52\x30\xaa\x19\xf8\x90\x03\xe3\x26\x67\xca\xbd\x47\x2a\x47\xcb\xc8\x56\xbc\xe4\x14\x9c\x97\x08\xcc\x0e\x77\xf6\x2d\xce\x35\x37\x30\x0b\x83\x20\xe3\x61\x10\x94\x57\x29\x57\x10\x57\x80\xd1\x46\xae\x3f\x50\x67\xc8\x22\xb2\x51\x76\xe1\x83\xdf\x08\x08\xd7\xb7\x10\xbf\x1f\xda\x34\x41\xdd\x5f\x0b\x60\xf0\x1c\x4a\x7a\xc5\x40\xd7\x8a\xc1\x8a\x41\x2d\x0c\x55\x8a\xa5\x40\x41\x73\xb1\x28\x18\x20\x03\x2e\x8c\x04\x59\x2b\x44\x5f\x30\x13\x06\x41\x93\x55\x17\x29\x57\x7a\xbe\x1b\xed\x66\x5c\xa4\x30\x01\x74\x61\xca\x2a\x93\xc3\x0c\x62\x21\x0d\xc4\x15\x35\x39\xbc\x9c\xbc\x84\xd8\xdc\x54\x0c\xd2\xbd\xbd\xbe\x39\xe6\xc3\x46\x7b\x6b\x90\x59\x83\x26\xd1\xee\x9e\x0f\x6e\x3e\x7f\xfb\xf3\x9e\x40\xcc\x7e\xc1\x0c\x33\x6d\x67\x67\x4d\xcb\xe1\x77\x5a\xaf\x07\x41\x73\x4e\x99\x4c\x5f\xf5\x7d\xd2\xba\x2c\x78\xc2\x93\xd8\x35\x4b\xa0\x5c\x42\x9c\xc1\xdd\x3d\x4c\x26\x53\xf8\x71\x80\xb6\xc9\x2a\x9d\x93\xe8\xe4\x7f\x1f\x88\xbd\x47\x56\xe9\x9a\xdb\x03\x55\xa2\x63\x49\x94\xac\x52\xe2\xc3\xcd\x0a\xcd\xc2\x20\x58\x70\x03\x49\x21\x45\x53\x93\x10\xed\x87\x56\xee\x61\xba\xbc\xc6\xf6\x52\x8b\x2d\x0d\xe6\x94\x95\x72\xc9\x86\x9d\xa5\xa9\x64\x7f\xaa\x7b\x1d\xc6\x9d\xd8\x26\x13\x06\xaa\x84\x58\x65\x6b\x7d\x80\x09\x34\x4d\xa7\x91\x53\xdd\xa4\xd6\x5e\xd2\x29\x22\xd5\x2a\xa5\x86\x8d\xf1\xfc\x6e\x25\x0d\x4f\x2a\x52\x90\x95\xe1\x52\xd0\xa2\xb8\x81\x8a\x0b\xac\x9a\x44\x96\x25\x37\x53\x43\x17\xd3\x4b\x45\x45\x92\x8f\x13\xf7\x7a\x86\xeb\xdc\xf7\xc8\xf3\x73\x78\x06\xf1\xc6\x8e\xd6\x52\xf4\x09\xd4\x54\xb2\xa5\xb2\xeb\x85\x7b\x80\x81\xf7\x9e\x66\xa9\xad\xab\xa6\x54\xb7\xf6\xcb\x0e\x7d\x10\xff\xa6\x9d\x74\x64\x49\x97\xbf\xcf\x20\xda\xc5\x24\xd0\x37\xe5\xa5\x2c\x78\x12\x2b\x96\xc1\xa7\xa3\x77\x1f\xf6\xc6\x28\x56\x5c\x08\x96\xa2\x87\xa2\xdd\xff\xc0\x64\x3a\x71\x17\x5e\x74\xd0\x7b\x1d\xdd\xd7\xa1\x4b\xaf\x9c\x25\x57\xb2\x36\x50\x52\x6d\x98\x1a\x26\x95\xd5\xa8\x6c\x25\x3c\x38\x6e\x0d\xe3\x35\xa1\x6f\x91\xe2\xc1\x9b\xda\x6a\x43\xf3\x8c\x99\x24\x87\x38\x36\x74\xa1\xd7\x00\x86\xf0\x3d\x90\x75\x3d\xf7\xf8\xc1\x2d\x87\xa3\xcf\x0e\xbb\xae\xbc\x16\x4b\x97\x88\xa9\x4d\xb4\x9e\xfb\x7a\x90\x6d\x31\x6e\x47\x20\x5b\x0a\xb3\xe0\xda\x8c\xe5\xfa\x67\xae\x0d\x60\xfb\x77\xb3\xbb\xab\x42\x9d\xcb\xca\x40\xac\x01\x11\x16\x85\xbc\x0c\x83\x4c\x2a\xb0\xcd\x86\x0b\xd8\x90\x5f\xaf\x0e\x20\x95\x61\x10\xf4\xd1\x06\x83\x3d\x42\x00\x9c\xeb\x5e\x45\x1b\x6a\x6a\x8d\x2a\x18\x30\x06\xdb\xea\xbb\x9f\x6f\x5e\x84\xd3\xdc\xfe\x4e\xb9\xb6\x07\x3d\x68\xbf\x1b\x21\x76\x42\x8d\xbb\x79\xea\x90\x26\x46\x96\x05\x8e\x27\x59\x16\x31\xce\x41\xd2\xd4\x05\x69\x36\xaa\x1e\x90\xf3\xd4\x3f\x42\x41\x13\xc5\x6d\xd7\x70\x48\x95\xe2\xc2\x64\x40\x00\x5e\xc4\xfb\xaf\x35\xbc\x88\xff\x8d\xff\xcc\xf0\x4f\xfd\x03\x4d\xda\xd2\x24\x51\xc3\x01\x48\xe4\xfc\x83\x7f\x21\x24\x36\x19\x29\x58\x1b\x9d\xba\x8b\xce\x7d\x18\x1a\xc5\x17\x0b\xa6\xc6\xc2\xfc\xcd\x89\x34\xe4\x52\x5e\x61\xfc\x1a\xff\x3d\x6c\xbb\xa8\x61\x7b\xd7\x01\xe8\x9c\x67\x66\x73\x2a\xb8\xa0\xac\x27\x43\x13\xb4\x26\x15\x7c\x2d\x5e\xb7\x2f\x9c\x46\x78\xc5\xda\xc2\xb2\xa4\x05\xa0\x8b\xa5\xc8\xf8\x22\x66\xd7\x95\x54\x06\x06\x79\xe3\x72\xdd\x3a\x33\x18\x20\x01\x89\xde\x36\x43\x6b\x93\x77\x02\xef\x9b\x78\x41\x0d\x5b\xd1\x1b\xe8\x59\xde\x87\xa1\xe3\x3c\xe6\xb8\x23\x2b\x01\x0a\xed\x88\x19\x1d\x4f\xbd\xd5\x68\xc4\x17\xb8\x1a\x0b\x88\x33\xfd\x78\x5f\x7e\x74\xc0\x31\xdc\xb4\x9a\x67\x20\x77\x9f\xf9\x63\xe4\x3f\x38\xd1\xdf\xb3\x57\xe5\x1f\x10\xf3\xb1\x5c\xb0\xd1\xc6\xf3\x91\x99\x26\x83\x9c\x62\xad\xa8\x71\x9f\x32\x63\x73\xb4\xf7\x95\x81\x65\x38\x64\xe3\x00\x6c\x39\x92\x41\x3d\xf6\xdc\x6a\xd7\xfc\x1e\x2d\x97\x62\xa3\x21\x77\xc9\xf7\x74\x72\x4f\xa5\xe4\xb3\x9a\xf4\xb7\x10\xcf\x46\x8f\x3b\xe9\xec\x0f\x9d\x04\x4b\x5a\xd4\xf8\xe7\xbf\x9a\x2f\x43\x3b\x0b\xed\x69\x4b\x47\xb3\xad\xa4\x47\x9d\xc7\x05\x1f\x25\x7a\x2c\xb8\xe1\xb4\xe0\xb7\x0c\xa8\x00\x56\x56\xe6\xa6\x21\x8e\x0d\x73\x63\x8e\x91\x30\x30\xb2\x4e\xf2\x2d\x44\x9e\x90\x9e\x1b\x14\xba\xcf\xc4\xe6\xf3\xb8\xa3\x99\x7a\x92\x38\x4b\x45\x9f\xea\x7a\x3f\xb3\xcf\xbe\xd0\xb2\x56\xc9\x68\x8d\x9d\x59\x89\xdd\xf3\xa8\x48\x35\x60\x67\xb4\xda\x6b\x5b\xed\xdf\x34\x51\x80\xc0\xee\x68\x59\xaf\x87\x3e\x6c\x8d\x93\x6e\x6d\x73\xaf\x75\xa4\xe1\x11\x93\xad\x23\xa5\xa4\xdc\xff\xe7\x03\x66\x4b\xcc\x24\x54\xbc\x62\x19\xe5\xc5\x81\xfb\xb6\xf9\x76\xfa\xee\xfd\x51\x73\xad\xd5\xb9\x0e\xc3\x20\x29\xd3\x26\xdb\xfd\x2c\x1b\x9c\xf9\xcd\x75\x70\xd6\x7e\x39\x0c\x4f\xed\x66\x33\x38\xc2\x4d\x66\x70\xe0\x5b\xfb\xe0\xcc\xf9\x6f\x70\xe4\xfb\xe4\xe0\xcc\xc7\xb5\x71\x15\xe9\x0b\x63\xa1\x7d\xd1\xb5\x1b\xd7\x7a\x0d\xf6\x90\xba\x66\x37\x76\xec\x7e\x8d\x49\xf4\x9a\x01\x16\x98\x77\xa0\xd0\x40\x48\x33\xa2\xfe\x1f\x00\x00\xff\xff\xef\xa7\x09\x58\x0a\x12\x00\x00")

func bashenvPlugnBashBytes() ([]byte, error) {
	return bindataRead(
		_bashenvPlugnBash,
		"bashenv/plugn.bash",
	)
}

func bashenvPlugnBash() (*asset, error) {
	bytes, err := bashenvPlugnBashBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bashenv/plugn.bash", size: 4618, mode: os.FileMode(420), modTime: time.Unix(1652510359, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bashenv/bash.bash":  bashenvBashBash,
	"bashenv/cmd.bash":   bashenvCmdBash,
	"bashenv/fn.bash":    bashenvFnBash,
	"bashenv/plugn.bash": bashenvPlugnBash,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bashenv": &bintree{nil, map[string]*bintree{
		"bash.bash":  &bintree{bashenvBashBash, map[string]*bintree{}},
		"cmd.bash":   &bintree{bashenvCmdBash, map[string]*bintree{}},
		"fn.bash":    &bintree{bashenvFnBash, map[string]*bintree{}},
		"plugn.bash": &bintree{bashenvPlugnBash, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
